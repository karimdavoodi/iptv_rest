ChangLog:
    2.5: May 13, 2020
        - remove launcher/default
        - change fields of some APIs

    2.4: May 11, 2020
        - Add UI at the buttom of file

    2.3: April 22, 2020
        - remove network info from status
        - remove system/logo and system/subtitle_logo
        - add live/inputs/types
        - change archive setting
        - add transcode profiles
        - remove live/logo
        - remove launcher/background and launcher/logo and launcher/components.logo
        - add launcher/setting
        
    2.2: April 12, 2020
        - remove fm APIs
        - change archive API

    2.1: April 4, 2020
        - change 'id' to '_id' to be compatible by MongoDB
        - change some APIs
        - add or remove some APIs

    2.0: March 28, 2020
        - review all APIs.
        - simplify Contents API (VOD/BOOK/PICTURES/...)
        - add one item GET method to most APIs
        - remove multipart APIs
        - add new APIs for channels logo, components icons, ...
        - refer to fields by id

    1.0: 
        - first version of APIs

#######################################################
HTTP Code:
    - switch(Response Code):
        case 200(OK):
                Return Response in GET and empty in other methods
                break
        case 400(Bad Request):
        case 401(Unauthorized):
        case 500(Internal Server Error):
                Return:
                    {
                        "errorCode": int,
                        "errorMessage": string
                    }
    
#######################################################
Methods:
    POST:   => add an item           -> Dosen't have ResponseBody
    PUT:    => change an item        -> Dosen't have ResponseBody
    DELETE: => delete an item        -> Dosen't have RequestBody
    GET:    => get one or more items -> Dosen't have ResponseBody
#######################################################
Authentication:  Basic Auth 
    - Any API must sent Base64 of 'user:pass' with 'Authorization' header
      #like: Authorization: Basic 'Base64 of user:pass'  
      #example: curl ##user user:pass  https://server/

#######################################################
##########            API       #######################
#######################################################

#Status ###############################################       
### Dashboard              
### Sensor0 (information)
        Description: Get information
        Path: /status/information
        Method: GET
        ResponseBody: 
            {
                "_id": 1,
                "Running": boolean,
                "Owner": string,
                "LicenseExpire": string,
                "Serial": string,
                "Version": string,
                "Uptime": epochtime,
                "LastReset": epochtime,
                "SystemIP": string,
                "SystemDate": epochtime,
                "SystemInternet": boolean,
                "Manufacturer": string,
                "Model": string,
                "CPU": string,
                "Memory": string
            }

### Sensor1 (CPU/MEM)  
        Description: Get CPU & MEM current stat
        Path: /status/cpu_mem
        Method: GET
        Parameters: 
                    [from=int&to=int&]
                    start-time=epochtime&
                    end-time=epochtime
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "cpuLoad":float,
                    "cpuCoreNum": int,
                    "cpuPercent":float,
                    "memTotal": int,
                    "memFree": int,
                    }
                ]

            }
### Sensor2 (Network)
        Description: Get Network current stat
        Path: /status/network
        Method: GET
        Parameters: 
                    [from=int&to=int&]
                    start-time=epochtime&
                    end-time=epochtime
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "time": epochtime,
                        "interfaces":[
                            {
                            "name": string,
                            "sendAve": int,
                            "receiveAve": int
                            },
                        ]
                    },
                ]
            }

### Sensor3 (Storage)
        Description: Get Storage current stat
        Path: /status/storage
        Method: GET
        Parameters: 
                    [from=int&to=int&]
                    start-time=epochtime&
                    end-time=epochtime
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "time": epochtime,
                        "mounts":[
                            {
                            "name": string,
                            "partition": string,
                            "total": int,
                            "free": int,
                            "readAve": int,
                            "writeAve": int
                            },
                        ]
                    },
                ]
            }
        
### Sensor4 (DVB)
        Description: Get DVB current stat
        Path: /status/dvb
        Method: GET
        Parameters: 
                    [from=int&to=int&]
                    start-time=epochtime&
                    end-time=epochtime
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "time": epochtime,
                        "inputDVBs":[
                            {
                            "_id": int,
                            "type": string
                            "parameters": string,
                            "channelNumber": int,
                            "signal": int,
                            "snr": int
                            },
                        ],
                        "outputDVBs":[
                            {
                            "_id": int,
                            "frequency": int,
                            "capacity": int
                            },
                        ]
                    }
                ]
            }
        
### Sensor5 (Input Channels)
        Description: Get Input channels list
        Path: /status/channels/input
        Method: GET
        Parameters: [from=int&to=int&]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "type": string,     #DVB, NET, HDD 
                    "name": string,
                    "epg": string,
                    "epg_percent": int,
                    "health": boolean,
                    },
                ]
            }

### Sensor6 (Output Channels Status)
        Description: Get Output channels list
        Path: /status/channels/output
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "status": boolean,
                    "type": string
                    "name": string,
                    "rf": boolean,
                    "rfFreq": int,
                    "rfSid": int,
                    "permission": int,
                    "record": boolean,
                    "udp": boolean,
                    "http": boolean,
                    "rtsp": boolean,
                    "hls": boolean
                    },
                ]
            }

### Sensor7 (Output Channels Screenshut)    
        Description: Get Output channels view list
        Path: /status/channels/output/view
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "name": string,
                    },
                ]
            }
        Path: /status/channels/output/view/{id}
        Method: GET
        ResponseBody: channel view image file 

### Sensor8 (Users)
        Description: Get users list
        Path: /status/users
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "name": string,
                    "active": boolean,
                    "online": boolean,
                    "lastActivity": string,
                    "lastActivityTime": epochtime
                    },
                ]
            }

### Sensor9 (Errors) 
        Description: Get error list
        Path: /status/errors
        Method: GET
        Parameters: 
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "error": string,
                    "priority": int
                    },
                ]
            }

### Reports(Backup,Export)  ##############################
### Users Activity
        Description: Get log of users activity. 'user' and 'activityType' are optional 
        Path: /report/user
        Method: GET
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
                    user=string&
                    activityType=string
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "user": int,
                    "activity": string  
                    },
                ]
            }
### System Activity
        Description: Get log of system activity. 'activityType' is optional 
        Path: /report/system
        Method: GET
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
                    activityType=string
        ResponseBody: 
            {
                "total":int,
                "content":[
                     {
                    "_id": int,
                    "time": epochtime,
                    "activity": string
                    },
                ]
            }
### Live Usage
        Description: Get log of Live channels activity.
        Path: /report/live
        Method: GET
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
                    [channel=string]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "channel": string,
                    "activity": string
                    },
                ]
            }
### VOD Usage
        Description: Get log of VOD activity.
        Path: /report/vod
        Method: GET
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
                    [content=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "content": int,
                    "activity": string
                    },
                ]
            }
### Components Usage
        Description: Get log of Components activity.
        Path: /report/component
        Method: GET
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
                    [component=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "component": int,
                    "activity": string
                    },
                ]
            }
### System Users Activity
        Description: Get log of System users.
        Path: /report/system_user
        Method: GET
        Parameters: [from=int&to=int]
                    start-time=epochtime&
                    end-time=epochtime
                    [user=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "time": epochtime,
                    "user": int,
                    "activity": string
                    },
                ]
            }
### System  ##############################################
### Setting
        Description: Manage localization data 
        Path: /system/location
        Method: GET
        ResponseBody: same as 'PUT' RequestBody

        Method: PUT, POST
        RequestBody: 
            {
                    "_id": 1,
                    "name": string,
                    "logo": int,
                    "debug": int,
                    "testUserId": int,
                    "weatherLocation": string,
                    "pryerTimeZone": string,
                    "pryerContentId": int,
                    "timeZone": string,
                    "systemTime": epochtime,
                    "gamaryShift": int,
                    "subtitleLogo":{
                        "logo": int,
                        "isLeft": boolean,
                        "components":[int, ...]
                     }
            }

### Network
        Description: Manage network setting
        Path: /system/network
        Method: GET
        ResponseBody: same as 'PUT' RequestBody

        Method: PUT,POST
        RequestBody: 
            {
                "_id": 1,
                "interfaces":[
                    {
                    "_id": int,
                    "name": string,
                    "description": string,
                    "ip": string,  
                    "mask": string,
                    },
                   ],
                "dns": string,
                "gateway": string,
                "mainInterface": int,
                "multicastBase": string,
                "multicastInterface": int,
                "addressForNAT": string,
                "staticRoute": [string, ... ],
                "firewallRule": [string, ... ]
            }
### System Users Profile 
        Description: Get information of current user
        Path: /system/users_me
        Method: GET
        ResponseBody: same as 'PUT' RequestBody 

        Description: Manage system users
        Path: /system/users
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/users/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "profileImage": int,
                "locationName": string,
                "creatorId": int, 
                "description": string,
                "start": epochtime,
                "expire": epochtime,
                "weektime": [int, ...],
                "accessList": [ 
                    "/system/users":[GET,PUT,POST,DELET],
                    "/system/pms":[GET,PUT,POST,DELET],
                    ...
                ],   
                "user": string,
                "pass": string,
            }

### Software Integration(PMS)
        Description: Manage PMS setting
        Path: /system/pms
        Method: GET
        ResponseBody: same as 'PUT' RequestBody 

        Method: PUT, POST  
        RequestBody: 
            {
                "_id": 1,
                "active": boolean,
                "name": string,
                "address": string,
                "user": string,
                "pass": string,   
            }

### VOD Accounts
        Description: Manage VOD accounts
        Path: /system/vod_account
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/vod_account/{id}
        Method: PUT, POST 
        RequestBody: 
            {
                    "_id": int,
                    "partner": string,
                    "user": string,
                    "pass": string,
            }

        Path: /system/vod_account/{id}
        Method: DELETE 

### Permissions
        Description: Manage of Permissions
        Path: /system/permission
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/permission/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string 
            }


### Week Times
        Description: Manage of Week Times
        Path: /system/weektime
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/weektime/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "hours": [
                    "0": [int, int, ..],
                    "1": [int, int, ..],
                    "2": [int, int, ..],
                    "3": [int, int, ..],
                    "4": [int, int, ..],
                    "5": [int, int, ..],
                    "6": [int, int, ..]
                ]
            }

### Backup/Restore
        Description: Backup Setting
        Path: /system/backup
        Method: GET
        ResponseBody: application/gzip file

        Description: Restor Setting
        Path: /system/backup
        Method: PUT  
        RequestBody: application/gzip file

### Update
        Description: Get license
        Path: /system/license
        Method: GET
        ResponseBody: 
            {
                "_id"
                "license":{    
                    ...
                }
            }

        Description: Set of license
        Path: /system/license
        Method: PUT, POST  
        RequestBody: application/octet-stream file

        Description: Update Software
        Path: /system/firmware
        Method: PUT  
        RequestBody: application/octet-stream file

### Start/Stop/Reboot/Shotdown/Logout
        Description: Operation on system

        Path: /system/restart
        Method: GET

        Path: /system/stop
        Method: GET

        Path: /system/reboot
        Method: GET

        Path: /system/logout
        Method: GET

### Storage ###############################
### Setting 
        Description: Storage setting
        Path: /storage/setting
        Method: GET
        ResponseBody: 
            {
                "_id": 1,
                "root": string,
                "timeShift":{
                    "maxSizeGB":int,
                    "maxPerChannel": int,
                    "EPGnaming": boolean,
                    },
                "NPVR":{
                    "maxSizeGB":int,
                    "maxPerUser": int
                }
            }
        Method: PUT, POST
        RequestBody: same as GET ResponsBody 


### Contents : Video, Audio, Book, AudioBook, Picture, Azan, TimeShift, NPVR, ... 
        Description: Get list of types like: video, audio, book, image
        Path: /storage/contents/types
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":string,
                    },
                 ]
            }
        Path: /storage/contents/types/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as GET ResponsBody 

        Description: Get list of contents formats like mp3, mp4
        Path: /storage/contents/formats
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":string,
                    },
                 ]
            }
        Path: /storage/contents/formats/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as GET ResponsBody 

        Description: Get list of platforms like: samsung, lg, android, amino
        Path: /storage/contents/platforms
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":string,
                    },
                 ]
            }
        Path: /storage/contents/platforms/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as GET ResponsBody 

        Description: Get list of categories
        Path: /storage/contents/categories
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":{
                        "en": string,
                        "fa": string,
                        "ar": string
                        }, 
                    "logo": int,
                    },
                 ]
            }

        Path: /storage/contents/categories/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as GET ResponsBody 

        Description: Contents list
        Path: /storage/contents/info
        Method: GET 
        Parameters: type=int[&from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                        "_id": int,
                        "type": int,
                        "format": int,
                        "category":[int, ...],
                        "name": string,
                        "permission":[int, ...],
                        "price": int,
                        "platform":[int, ...],
                        "date": epochtime,
                        "languages" : [2-char, ... ], 
                        "description":[
                            "en": {
                                "name": string,
                                "description": string
                                },
                            "fa": {
                                "name": string,
                                "description": string
                                },
                            "ar": {
                                "name": string,
                                "description": string
                            }
                        ]
                    },
                ]
            }

        Path: /storage/contents/info/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as content in 'GET' ResponsBody 

        Path: /storage/contents/media/{id}
        Method: GET
        ResponseBody: media file
        Method: PUT, POST
        RequestBody: media file
        Method: DELETE

        Path: /storage/contents/poster/{id}
        Method: GET
        ResponseBody: poster file
        Method: POST, PUT
        RequestBody: poster file
        Method: DELETE

        Path: /storage/contents/subtitle/{id}
        Method: GET
        ResponseBody: subtitle file
        Method: POST, PUT
        RequestBody: subtitle file
        Method: DELETE
    
### Advertising
        Description: Advertising Config
        Path: /storage/advertize
        Method: GET
        Parameters: [from=int&to=int]
        ResponsBody: 
            {
                "total":int,
                "content":[
                        {
                            "_id": int,
                            "content": int,
                            "name": string,
                            "categories": [int,...], 
                            "weektime": [int, ...],
                            "expire": epochtime,
                            "period": int,
                        },
                    ]
            }
        Path: /storage/advertize/{id}
        Method: GET, PUT, POST
        RequestBody: same as content in 'GET' ResponsBody 
        Method: DELETE

 
### Media Server #########################################
### Tuners(Scan,Enable,Disable)
        Description: Get Tuners from System
        Path: /live/tuners/hadrware/input
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id": int,
                    "name": string, 
                    "is_dvbt": boolean, 
                    }
                 ]
            }
        Path: /live/tuners/hadrware/output
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id": int,
                    "name": string, 
                    "is_dvbt": boolean, 
                    }
                 ]
            }
        Description: Manage of Tunners
        Path: /live/tuners/input
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/tuners/input/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: in PUT, POST  
            {
                "_id": int,
                "name": string, 
                "active": boolean,
                "is_dvbt": boolean, 
                "freq": int, 
                "errrate": string, 
                "pol": string, 
                "symrate": int,
                "switch": int, 
            }

        Path: /live/tuners/input/scan/{id}
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "name": string, 
                        "dvb_id": int, 
                        "is_dvbt": boolean, 
                        "sid": int, 
                        "aid": int, 
                        "vid": int,
                        "freq": int, 
                        "pol": int, 
                        "scramble": boolean, 
                        "symb": int
                    }

                ]
            }

        Path: /live/tuners/output
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": 1,
                "dvbs": [int, int, ], 
                "dvbt": [int, int, ], 
                "mode_s": string, 
                "mode_t": string, 
                "pcr": int
            }


### Live Inputs ################################
        Path: /live/inputs/types
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id": int,
                    "name": string,
                    },
                ]
            }

### DVB Channels
        Description: Manage of DVB channels
        Path: /live/inputs/dvb
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/dvb/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "dvb_id": int, 
                "is_dvbt": boolean, 
                "sid": int, 
                "aid": int, 
                "vid": int,
                "freq": int, 
                "pol": int, 
                "scramble": boolean, 
                "symb": int
            }


### Archive Channels
        Description: Manage of Archive channels
        Path: /live/inputs/archive
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/archive/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "name": string,
                "active": boolean,
                "isTV": boolean, 
                "manualSchedule": boolean,
                "contents": [ 
                        {
                        "content": int,
                        "weekday": int,
                        "time": int,
                        }
                    ],
                
            }

### Network Channels
        Description: Manage of Network channels
        Path: /live/inputs/network
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/network/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "name": string,
                "url": string, 
                "active": boolean,
                "static": boolean
            }


### Account Channels
        Description: Manage of IPTV account channels
        Path: /live/inputs/iptv
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/iptv/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "name": string,
                "iptv": string,
                "url": string, 
                "active": boolean
            }


### Virtual Network Channels
        Description: Manage of virtual NET channels (import channels )
        Path: /live/inputs/virtual_net
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/virtual_net/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "url": string, 
                "record": boolean,
                "permission": int
            }


### Virtual DVB Channels
        Description: Manage of virtual DVB channels (import channels )
        Path: /live/inputs/virtual_dvb
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/virtual_dvb/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "freq": int, 
                "sid": int, 
                "record": boolean,
                "permission": int
            }


### Transcoding    
        Description: Manage of transcodec channels
        Path: /live/transcode_profile
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/transcode_profile/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "preset": string,
                "videoCodec": string, 
                "videoSize": string, 
                "videoRate": string, 
                "videoFps": string, 
                "videoProfile": string, 
                "audioCodec": string, 
                "audioRate": string, 
                "extra": string 
            }

        Description: Manage of transcodec channels
        Path: /live/inputs/transcode
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/transcode/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "input": int, 
                "inputType": int, 
                "profile": int,
            }


### UnScrambling
        Description: Manage of cccam accounts
        Path: /live/cccam
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/cccam/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "protocol": string,
                "server": string, 
                "user": string, 
                "pass": string 
            }


        Description: Manage of input scrambled channels
        Path: /live/unscramble
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/unscramble/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "channel": int, 
                "bssKey": string,
                "cccam": int
            }


### Scrambling   
        Description: Manage of channel scrambling
        Path: /live/scramble
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/scramble/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "channel": string, 
                "crypto": string,
                "key": string 
            }


### Live Output  #########################################
### Silver Channels
        Description: Manage of Output silver channels
        Path: /live/output/silver
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/output/silver/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "inputId": int,   
                "inputType": int,   
                "name": string, 
                "logo": int,
                "permission": int,
                "category": [int],
                "freq": int, 
                "sid": int, 
                "recordTime": int,
                "udp": boolean,
                "http": boolean,
                "rtsp": boolean,
                "hls": boolean
            }


### Gold Channels
        Description: Manage of Output gold channels
        Path: /live/output/gold
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/output/gold/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "user": int, 
                "iptvAccount": string,
                "tuner": int,
                "satellites":[ 
                    {
                        "name": string,
                        "switch": int,
                        "LNC":["LH", "LV", "HH", "HV"]
                    }
                ] 
            }

### Launcher ############################################# 
### Components 
        Description: Types of components like: LiveTV, LiveRadio, VoD, AoD, Picture, ..
        Path: /launcher/components/types
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                        {
                            "_id": int,
                            "name": string,
                        },
                 ]
            }
        ##########################################
        Description: Manage of components
        Path: /launcher/components/info
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /launcher/components/info/{id}
        Method: GET
        RequestBody: same as 'PUT' RequestBody 
        Method: PUT, POST 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "type": int,
                "name":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    }, 
                "logo": int,
                "category":[int, ...]
            }

        Path: /launcher/components/info/{id}
        Method: DELETE 

### Components Arrange
        Description: Manage of Launcher's Menu
        Path: /launcher/menu
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /launcher/menu/{id}
        Method: GET
        RequestBody: same as 'PUT' RequestBody 
        Method: PUT, POST 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    }, 
                "logo": int,
                "permission": int,
                "components": [int, ... ]
            }

        Path: /launcher/menu/{id}
        Method: DELETE 

        Description: Manage of Launcher's Config
        Path: /launcher/setting
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /launcher/setting/{id}
        Method: GET
        RequestBody: same as 'PUT' RequestBody 
        Method: PUT, POST 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "menu": [int, ... ],
                "icons":{
                    "background": int,
                    "company":int,
                    "net_ok":int,
                    "net_nok":int,
                    "lock":int,
                    "unlock":int,
                    "logo": {
                        "en": int,
                        "fa": int,
                        "ar": int
                        }
                },
                "font":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    },
                "welcome":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    },
                "user":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    },
                "language": string,
                "welcomeClip": boolean,
                "welcomeClipMedia": {
                            "en":int,
                            "fa":int,
                            "ar":int
                            },
                "unitName": string,
                "clientHotspot": string,
                "defaultChannel": int 
            }

        Path: /launcher/setting/{id}
        Method: DELETE 
### Users ################################################
### User Groups
        Description: Manage of Users's groups
        Path: /users/group
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/group/{id}
        Method: GET
        RequestBody: same as 'PUT' RequestBody 
        Method: PUT, POST 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "permission": [int, ... ],
                "weektime": [int, ... ] 
            }

        Path: /users/group/{id}
        Method: DELETE 

### Profile(ExpireTime&Date,)     
        Description: Manage of Users
        Path: /users/user
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/user/{id}
        Method: GET
        RequestBody: same as 'PUT' RequestBody 
        Method: PUT, POST 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "description": string,
                "group": [int, ... ],
                "connections": int, 
                "ipAddress": string, 
                "macAddress": string, 
                "language": string, 
                "launcher": int, 
                "user": string, 
                "pass": string, 
                "ssidUser": string,
                "ssidPass": string,
                "vodId": int,
                "npvr": int,
                "start": epochtime,
                "expire": epochtime,
                "stats":{
                    "timers":{},
                    "npvr":[]
                }
            }

        Path: /users/user/{id}
        Method: DELETE 

### Messaging  
        Description: Message to message
        Path: /users/message/to/{userid}
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/message/to/{userid}
        Method: PUT, POST 
        RequestBody: 
            {
                "_id": int,
                "user": int,
                "time": epochtime,
                "subject": string, 
                "body": string,
            }
        Path: /users/message/to/{userid}/{msg_id}
        Method: DELETE 

        Description: Message from User
        Path: /users/message/from/{userid}
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {   
                    "_id": int,
                    "user": int,
                    "time": epochtime,
                    "subject": string, 
                    "body": string,
                    }
                 ]
            }

        Path: /users/message/from/{userid}/{msg_id}
        Method: DELETE 

        Description: Message to All Users
        Path: /users/message/broadcast
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/message/broadcast
        Method: PUT 
        RequestBody: 
            {
                "_id": int,
                "group": [ int, ... ],
                "time": epochtime,
                "weektime": [int, ... ],
                "expire": epochtime,
                "subject": string, 
                "body": string,
            }
        Path: /users/message/broadcast/{msg_id}
        Method: DELETE 

#######################################################
############   UI   ###################################
#######################################################
Status: 							
        - Dashboard        
        - Sensor0 (information)
        - Sensor1 (CPU/MEM)		
        - Sensor2 (Network)
        - Sensor3 (Storage)
        - Sensor4 (DVB)
        - Sensor5 (Input Channels)
        - Sensor6 (Output Channels Status)
        - Sensor7 (Output Channels Screenshut)   	
        - Sensor8 (Users)(All User Status,All Client Model)
        - Sensor9 (Errors) 
Reports:				 
        - Users Activity
        - System Activity
        - Live Usage
        - VOD Usage
        - Components Usage
        - System Users Activity
System:
        - Setting
        - Network
        - System Users
        - Software Integration(PMS)
        - VOD Accounts
        - Contents:
            - Type
            - Format
            - Category
            - Platform
            - Info
            - Media
            - Poster
            - Subtitle
        - Storage Setting
        - Advertize
        - Backup/Restore
        - Update
        - Start/Stop/Reboot/Shotdown/Logout
Live Server:
        - Tuners
        - Live Inputs:
            - DVB Channels
            - Archive Channels
            - Network Channels
            - Web Channels
            - Account Channels
            - Virtual Network Channels
            - Virtual DVB Channels
        - Live Processed Inputs:
            - Transcoding Config
            - UnScramble Config
            - Transcoded Channels
            - UnScrambled Channels
            - Scrambled Channels
            - Mixed Channels
        - Live Output:
            - Silver Channels
            - Gold Channels
Launcher:
        - Setting
        - Components Type
        - Components Info
        - Launchers Menu
        - Launchers Setting
Users:
        - Groups
        - Users
        - Messaging:
            - From
            - To

