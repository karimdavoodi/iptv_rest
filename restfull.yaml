ChangLog:
    3.0: Jul 26, 2020
        - change live APIs

    3.0: Jul 18, 2020
        - change fields in launcher 
        - complete mix input channel fields
        - add nested field search 

    2.9: Jul 2, 2020
        - add systemId to reports
        - add webui_state api
        - return _id in POST

    2.8: Jun 6, 2020
        - change report/operation and report/sensor to system/operation and system/sensor
        - add all fields as parameter to 'GET' method

    2.7: May 30, 2020
        - change status and report sections
        - add new api like users_accesslist 
        - add comment for fields

    2.6: May 18, 2020
        - change live/inputs/iptv to live/inputs/web
        - change two path names

    2.5: May 13, 2020
        - remove launcher/default
        - change fields of some APIs

    2.4: May 11, 2020
        - Add UI at the buttom of file

    2.3: April 22, 2020
        - remove network info from status
        - remove system/logo and system/subtitle_logo
        - add live/inputs/types
        - change archive setting
        - add transcode profiles
        - remove live/logo
        - remove launcher/background and launcher/logo and launcher/components.logo
        - add launcher/setting
        
    2.2: April 12, 2020
        - remove fm APIs
        - change archive API

    2.1: April 4, 2020
        - change 'id' to '_id' to be compatible by MongoDB
        - change some APIs
        - add or remove some APIs

    2.0: March 28, 2020
        - review all APIs.
        - simplify Contents API (VOD/BOOK/PICTURES/...)
        - add one item GET method to most APIs
        - remove multipart APIs
        - add new APIs for channels logo, components icons, ...
        - refer to fields by id

    1.0: 
        - first version of APIs

#######################################################
HTTP Code:
    - switch(Response Code):
        case 200(OK):
                Return Response in GET.
                Return _id in POST. 
                And empty in other methods
                break
        case 400(Bad Request):
        case 401(Unauthorized):
        case 500(Internal Server Error):
                Return:
                    {
                        "errorCode": int,
                        "errorMessage": string
                    }
    
#######################################################
Methods:
    POST:   => add an item           -> Dosen't have ResponseBody
    PUT:    => change an item        -> Dosen't have ResponseBody
    DELETE: => delete an item        -> Dosen't have RequestBody
    GET:    => get one or more items -> Dosen't have ResponseBody
#######################################################
Authentication:  Basic Auth 
    - Any API must sent Base64 of 'user:pass' with 'Authorization' header
      #like: Authorization: Basic 'Base64 of user:pass'  
      #example: curl -u user:pass  http://server:8139/..
#######################################################
Query: in 'GET' method, use any field as parameter.  
    with this syntax:
        field=value                  => check if field == value
        field.nested_field=value     => check if nested_field == value (inside of filed)
        field=value1,value2,value3   => check if field is in [value1,value2,value3]
        field=value1:value2          => check if field is between value1 and value2

        field=!value                  => check if field != value
        field=!value1,value2,value3   => check if field is not in [value1,value2,value3]
        field=!value1:value2          => check if field is not between value1 and value2

    special parameters: 
        'from' and 'to' for paging of result
    deprecrated: but not disabled 
        you can use "time=1:2" instead of "start-time=1&end-time=2"
        you can use "_id=1:2" instead of "start-id=1&end-id=2"
    example: 
        curl "http://127.0.0.1:8139/launcher/components/info?type=2"
            records that 'type' is 2
        curl "http://127.0.0.1:8139/launcher/components/info?name.en=Book"
            records that '{ name : { en : "Book" } }' 
        curl "http://127.0.0.1:8139/launcher/components/info?type=2&active=true"
            records that 'type' is 2, and 'active' is true
        curl "http://127.0.0.1:8139/launcher/components/info?type=1:5"
            records that 'type' is between 1 and 5
        curl "http://127.0.0.1:8139/launcher/components/info?type=1:5&logo=37,60"
            records that 'type' is between 1 and 5, and 'logo' is (37 or 60)

#######################################################
##########            API       #######################
#######################################################

### Reports ##############################
        Description: Get information
        Path: /status/information
        Method: GET
        ResponseBody: 
            {
                "_id": 1,
                "Running": boolean,
                "Owner": string,
                "OwnerId": string,
                "LicenseExpire": string,
                "LicenseDate": epochtime,      # time of license change
                "Serial": string,
                "Version": string,
                "Uptime": epochtime,
                "Kernel": string,
                "LastReset": epochtime,
                "SystemIP": string,
                "SystemDate": epochtime,
                "SystemInternet": boolean,
                "Manufacturer": string,
                "Model": string,
                "CPU": string,
                "CoreNum": int,
                "Storage": int,     # in Byte
                "Memory": int       # in Byte
            }
        Description: Get log of errors 
        Path: /report/error
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "process": string,
                    "message": string,
                    "level":int
                    },
                ]
            }
### Users Activity
        Description: Get log of IPTV users activity.  
        Path: /report/iptv_user
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "user": int,         # from users/user   
                    "platform":int,      # from storage/contents/platforms
                    "component":int      # from launcher/components/info
                    "category":int,      # from storage/contents/categories
                    "content":int,       # from storage/contents/info or live/output/* 
                    "operation": int,    # from report/operations
                    },
                ]
            }
### System Activity
        Description: Get log of Web UI activity.
        Path: /report/webui_user
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                     {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "user": int,         # from system/users
                    "api": string,       # from system/users_accesslist
                    "operation": int,    # from report/operations
                    "oldValue":object,
                    "newValue":object
                    },
                ]
            }
        Description: Get log of Web UI activity.
        Path: /report/webui_state
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                     {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "user": int,         # from system/users
                    "page": string       # from system/users_accesslist
                    },
                ]
            }
        Path: /report/webui_state
        Method: POST 
        RequestBody: same as GET

### Live Usage
        Description: Get log of Live channels activity.
        Path: /report/system_usage
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "sysLoad":float,        # from 0.0 .. 100(or more)
                    "cpuUsage":float,       # from 0.0 .. 1.0
                    "memUsage": float,      # from 0.0 .. 1.0
                    "diskUsage": float,     # from 0.0 .. 1.0 
                    "networkInterfaces":[
                            {
                            "name": string,
                            "read": int,    # in Byte
                            "write": int    # in Byte
                            }
                        ],
                    "diskPartitions":[
                            {
                            "name": string,
                            "read": int,    # in Byte
                            "write": int    # in Byte
                            }
                        ],
                    "contents": {           # size in byte
                        "All": int,
                        "Video": int,
                        "Audio": int,
                        "Image": int,
                        "TimeShift": int,
                        "userContents": int
                    }
                ]
            }
### VOD Usage
        Description: Get log of VOD activity.
        Path: /report/channels
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "inputId": int,
                    "inputType": int,   # live/inputs/types
                    "status": int       # from 0 .. 100, helth percent of input channels 
                    },
                ]
            }
### Tuners Usage
        Description: Get log of Components activity.
        Path: /report/tuners
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "input":[
                        {
                        "tuner": int,    # from live/tuners/input
                        "signal": int,   # from 0 .. 65000
                        "snr": int       # from 0 .. 65000
                        },
                    ],
                    "output":[
                        {
                        "tuner": int,   # from live/tuners/output
                        "capacity": int # from 0 .. 100
                        },
                    ]
                }
            }

### Surver Reports
        Description: Get log of Users Survey.
        Path: /report/survey
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "systemId": int,
                    "time": epochtime,
                    "user":int,
                    "survey":[
                        {
                            "_id": int,         # system/survey id
                            "grade": int        # from 0 .. 5
                        }
                    ]
                ]
            }
        Description: List of reports Operations
        Path: /system/operations
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id":int,
                        "name":string
                    }
                ]
            }
        Description: Manage sensors
        Path: /system/sensor
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/sensor/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "name":string,
                "user":int,         # from system/users
                "settings": string
            }
### System  ##############################################
### Setting
        Description: Get general setting 
        Path: /system/general
        Method: GET
        ResponseBody: 
        {
        "_id": int,
        "debug": int,
        "testUserId": int,
        "logo":{
            "en":{
                "manufacturerLarge": int,
                "manufacturerSmall": int
            },
            "fa":{
                "manufacturerLarge": int,
                "manufacturerSmall": int
            },
            "ar":{
                "manufacturerLarge": int,
                "manufacturerSmall": int
            }
        }

        Description: Manage localization data 
        ResponseBody: same as 'PUT' RequestBody
        Description: Manage localization data 
        Path: /system/location
        Method: GET
        ResponseBody: same as 'PUT' RequestBody

        Method: PUT, POST
        RequestBody: 
            {
                    "_id": 1,
                    "location": int,        # from system/cities
                    "azanContent": int,     # 'Video' type from storage/contents/info
                    "timeZone": string,     # 
                    "systemTime": epochtime,
                    "logo":{     # 'Logo' type from system/storage/contents/info
                        "en":{
                            "ownerSmall":int, 
                            "ownerLarge":int, 
                            },
                        "fa":{
                            "ownerSmall":int,
                            "ownerLarge":int,
                            }
                        "ar":{
                            "ownerSmall":int,
                            "ownerLarge":int,
                            }
                    },
                    "subtitle":{
                        "isLeft": boolean,
                        "components":[int]  # launcher/components/info
                     }
                    "map":{
                        "server": string,
                        "lat": float,
                        "lon": float,
                        "zoom":int
                     }
            }
        Description: List of cities for weather and prayerTime
        Path: /system/cities
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                    "_id": int,
                    "country": string,
                    "name":{
                        "en": string,
                        "fa": string,
                        "ar": string
                    }
                ]
            }

### Network
        Description: Manage network setting
        Path: /system/network
        Method: GET
        ResponseBody: same as 'PUT' RequestBody
        Method: PUT,POST
        RequestBody: 
            {
                "_id": 1,
                "interfaces":[
                    {
                    "_id": int,
                    "name": string,
                    "description": string,
                    "ip": string,  
                    "mask": string,
                    },
                   ],
                "dns": string,               # ip address
                "gateway": string,           # ip address
                "mainInterface": int,        # interface id
                "multicastBase": int,        # Multicast class : 224 .. 239
                "multicastInterface": int,   # interface id
                "addressForNAT": string,     # ip:[port] address
                "staticRoute": [string],     # string to pass to 'route' command
                "firewallRule": [string]     # string to pass to 'iptables' command
            }
### System Users Profile 
        Description: Get information of current user
        Path: /system/users_me
        Method: GET
        ResponseBody: same as 'PUT' RequestBody 

        Description: Manage system users
        Path: /system/users
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/users/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "profileImage": int,        # 'Logo' type from system/storage/contents/info
                "locationName": string,
                "creatorId": int,           # from system/users 
                "description": string,
                "start": epochtime,
                "expire": epochtime,
                "weektime": [int],          # from system/weektime  
                "accessList": {             # from system/users_accesslist 
                    "/system/users":[GET,PUT,POST,DELET],
                },   
                "user": string,     # use for Authorization
                "pass": string,     # use for Authorization
            }
        Path: /system/users_accesslist
        Method: GET
        ResponseBody: 
            {
                "api1":[method,..],    #from APIs of this document
                "api2":[method,..],
                ...
            }
### Hotel Survey
        Description: Manage system users
        Path: /system/survey
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/survey/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "description":{
                    "en": string,
                    "fa": string,
                    "ar": string
                }
            }
### Software Integration(PMS)
        Description: Manage PMS setting
        Path: /system/pms
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/pms/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": 1,
                "active": boolean,  
                "name": string,
                "address": string,
                "user": string,
                "pass": string,   
            }

### VOD Accounts
        Description: Manage VOD accounts
        Path: /system/vod_account
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/vod_account/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                    "_id": int,
                    "partner": string,
                    "user": string,
                    "pass": string,
            }


### Permissions
        Description: Manage of Permissions
        Path: /system/permission
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/permission/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string 
            }


### Week Times
        Description: Manage of Week Times
        Path: /system/weektime
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[
                        ...same as 'PUT' RequestBody
                ]
            }

        Path: /system/weektime/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "hours": [
                    "0": [int, int, ..],
                    "1": [int, int, ..],
                    "2": [int, int, ..],
                    "3": [int, int, ..],
                    "4": [int, int, ..],
                    "5": [int, int, ..],
                    "6": [int, int, ..]
                ]
            }

### Backup/Restore
        Description: List of Backup files
        Path: /system/backup/list
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "name": string,
                        "size": int,
                        "time": epochtime
                    }
                ]
            }

        Description: Make new Backup
        Path: /system/backup/backup
        Parameters: name=string
        Method: POST

        Description: Delete a Backup
        Path: /system/backup/backup
        Parameters: name=string
        Method: DELETE

        Description: Download a Backup
        Path: /system/backup/backup
        Parameters: name=string
        Method: GET

        Description: Restore a Backup
        Path: /system/backup/backup
        Parameters: name=string
        Method: PUT

### Update
        Description: Get license
        Path: /system/license
        Method: GET
        ResponseBody: 
            {
                "_id"
                "license":{    
                    ...
                }
            }

        Description: Set of license
        Path: /system/license
        Method: PUT, POST  
        RequestBody: application/octet-stream file

        Description: Update Software
        Path: /system/firmware
        Method: PUT  
        RequestBody: application/octet-stream file

### Start/Stop/Reboot/Shotdown/Logout
        Description: Operation on system

        Path: /system/restart
        Method: GET

        Path: /system/stop
        Method: GET

        Path: /system/reboot
        Method: GET

        Path: /system/logout
        Method: GET

### Storage ###############################
### Setting 
        Description: Storage setting
        Path: /storage/setting
        Method: GET
        ResponseBody: 
            {
                "_id": 1,
                "root": string,
                "timeShift":{
                    "maxSizeGB":int,
                    "maxPerChannel": int,
                    "EPGnaming": boolean,
                    },
                "NPVR":{
                    "maxSizeGB":int,
                    "maxPerUser": int
                }
            }
        Method: PUT, POST
        RequestBody: same as GET ResponsBody 


### Contents : Video, Audio, Book, AudioBook, Picture, Azan, TimeShift, NPVR, ... 
        Description: Get list of types like: video, audio, book, image
        Path: /storage/contents/types
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":string,
                    },
                 ]
            }

        Description: Get list of contents formats like mp3, mp4
        Path: /storage/contents/formats
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":string,
                    },
                 ]
            }

        Description: Get list of platforms like: samsung, lg, android, amino
        Path: /storage/contents/platforms
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "name":string,
                    },
                 ]
            }

        Description: Get list of categories
        Path: /storage/contents/categories
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id":int,
                    "description": string,
                    "name":{
                        "en": string,
                        "fa": string,
                        "ar": string
                        }, 
                    "logo": int,  # 'Logo' type from storage/contents/info
                    "permission": [int],      # from system/permission
                    "weektime": [int]          # from system/weektime  
                    },
                 ]
            }

        Path: /storage/contents/categories/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as GET ResponsBody 

        Description: Contents list
        Path: /storage/contents/info
        Method: GET 
        Parameters: type=int[&from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                        "_id": int,
                        "type": int,                # from storage/contents/types
                        "format": int,              # from storage/contents/formats
                        "category":[int],           # from storage/contents/categories
                        "name": string,
                        "price": int,
                        "platform":[int],           # from storage/contents/platforms
                        "date": int,                # date in year 
                        "languages" : [string],     # from 'en','fa','ar' 
                        "description":{
                            "en": {
                                "name": string,
                                "description": string
                                },
                            "fa": {
                                "name": string,
                                "description": string
                                },
                            "ar": {
                                "name": string,
                                "description": string
                            }
                        }
                    },
                ]
            }

        Path: /storage/contents/info/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as content in 'GET' ResponsBody 

        Path: /storage/contents/media/{id}
        Method: GET
        ResponseBody: media file
        Method: PUT, POST
        RequestBody: media file
        Method: DELETE

        Path: /storage/contents/poster/{id}
        Method: GET
        ResponseBody: poster file
        Method: POST, PUT
        RequestBody: poster file
        Method: DELETE

        Path: /storage/contents/subtitle/{id}
        Method: GET
        ResponseBody: subtitle file
        Method: POST, PUT
        RequestBody: subtitle file
        Method: DELETE
    
### Advertising
        Description: Advertising Config
        Path: /storage/advertize
        Method: GET
        Parameters: [from=int&to=int]
        ResponsBody: 
            {
                "total":int,
                "content":[
                        {
                            "_id": int,
                            "content": int,        # 'Video','Picture','Text'   
                            "name": string,
                            "categories": [int],   # from storage/contents/categories
                            "start": epochtime,
                            "expire": epochtime,
                            "period": int,
                        },
                    ]
            }
        Path: /storage/advertize/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: same as content in 'GET' ResponsBody 

 
### Media Server #########################################
        Description: Get Satellite names
        Path: /live/satellites/names
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                      {
                           "_id": int,
                           "active": boolean,
                           "name": string, 
                           "dvbt": boolean
                      }
                 ]
            }
        Description: Get Satellite frequency
        Path: /live/satellites/frequencies
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                      {
                       "_id": int,
                       "active": boolean,
                       "name": string, 
                       "satelliteId": string,       # from satellites/names
                       "frequency": int,
                       "parameters": string         # linke "T 602000000 8MHz 2/3 NONE QAM64 8k 1/8 NONE"
                                                    # or    "S 11242000 V 27500000 3/4"
                      }
                 ]
            }

        Description: Get Satellite channels
        Path: /live/satellites/channels
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                      {
                       "_id": int,
                       "active": boolean,
                       "name": string, 
                       "frequencyId": string,       # from satellites/frequencies
                       "serviceId": int,        
                       "videoId": int,    
                       "audioId": [int],   
                       "scrambled": boolean
                      }
                 ]
            }
        Description: Get physical tuners list
        Path: /live/tuners/system
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {

                "content":[    
                      {
                       "_id": int,
                       "systemId": int,         
                       "name": string, 
                       "dvbt": boolean,
                       "inputDvb": boolean,
                      }
                 ]
            }
        Description: Get/Set tuners
        Path: /live/tuners/info
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                      {
                       "_id": int,
                       "active": boolean,
                       "description": string,
                       "dvbt": boolean,
                       "systemId": int,          # from tuners/system
                       "frequencyId": int,       # from satellites/frequencies
                       "diSEqC": int,            # from 1 .. 4
                       "virtual": boolean
                      }
                 ]
            }
        Path: /live/tuners/info/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: like content of GET

        Path: /live/tuners/scan/{id}            # id  from tuner/info
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "name": string, 
                        "serviceId": int, 
                        "videoId": int,
                        "audioId": int, 
                        "scrambled": boolean
                    }

                ]
            }
        Path: /live/tuners/scan_bw/{id}        # id from tuner/info
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "name": string, 
                        "serviceId": int, 
                        "videoId": int,
                        "audioId": int, 
                        "scrambled": boolean
                    }

                ]
            }
        Description: Get/Set network iptv account
        Path: /live/network/accounts
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                      {
                       "_id": int,
                       "active": boolean,
                       "name": string, 
                       "description": string,
                       "url": string,
                       "virtual": boolean
                      }
                 ]
            }
        Path: /live/network/accounts/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: like content of GET

        Description: Get network iptv account channels
        Path: /live/network/channels
        Method: GET
        ResponseBody: 
            {
                "total":int,
                "content":[
                    {
                        "_id": int,
                        "name": string, 
                        "accountId": int,           # from network/accounts 
                        "url": int,
                    }
                ]
            }

### Processed Profiles 
        Description: Manage of mix profiles
        Path: /live/profiles/mix
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/profiles/mix/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "input1": {
                    "useVideo": boolean,
                    "useAudio": boolean,
                    "audioNumber": int
                    },
                "input2": {
                    "useVideo": boolean,
                    "useAudio": boolean,
                    "audioNumber": int,
                    "whiteTransparent": boolean,
                    "posX": int,
                    "posY": int,
                    "width": int,
                    "height": int
                    },
                "output":{          # use if we mix two video
                    "width": int,
                    "height": int,
                    "bitrate": int
                    }
            }
        Description: Manage of transcodec channels
        Path: /live/profiles/transcode
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/profiles/transcode/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "preset": string,       # from  '','ultrafast','fast','medium','slow','veryslow' 
                "videoCodec": string,   # from  '','h265','h264','mpeg2' 
                "videoSize": string,    # from  '','4K', 'FHD', 'HD', 'SD', 'CD' 
                "videoRate": int,       # from 1 .. 100000000  (in bps) 
                "videoFps": int,        # from 1 .. 60
                "videoProfile": string, # from  '','Baseline', 'Main', 'High'
                "audioCodec": string,   # from  '','aac','mp3','mp2' 
                "audioRate": int,       # from 1 to 1000000 (in bps)
                "extra": string 
            }
        Description: Manage of scrambling profiles
        Path: /live/profiles/scramble
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/profiles/scramble/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "offline":{
                    "algorithm": string,   # from 'BISS', 'AES128', 'AES256' 
                    "key": string 
                }
                "online":{
                    "protocol": string,  # from "cccam","camd35","cs378x","gbox","newcamd"
                    "server": string, 
                    "user": string, 
                    "pass": string 
                }
            }
### Live Inputs ################################
        Path: /live/inputs/types
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {
                    "_id": int,
                    "name": string,
                    },
                ]
            }

        Description: Manage of DVB channels
        Path: /live/inputs/dvb
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/dvb/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "logo": int,            # from storage/contents/info type 'Logo'. auto select if name == name
                "dvbId": int,           # from tuners/info
                "channelId": int,       # from satellite/channels
                "tv": boolean 
            }

        Description: Manage of Archive channels
        Path: /live/inputs/archive
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/archive/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
               "_id": int,
               "active": boolean,
               "description": string, 
               "name": string, 
               "logo": int,                    # from storage/contents/info  type 'Logo'
               "tv": boolean,
               "contents":[
                    {
                    "content": int,       # from storage/contents/info type: 'Video' or 'Audio'
                    "weektime": int,     # from system/weektime
                    "startDate": epochtime,
                    "endDate": epochtime,
                    }
               ]
            }

        Description: Manage of Network channels
        Path: /live/inputs/network
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/network/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,             
                "type": string,             # from 'MST', 'SST', 'WEB'
                "description": string, 
                "accountId": string,        # from live/network/accounts
                "channelId": string,        # from live/network/channels 
                "url": string, 
                "static": boolean,
                "virtual": boolean,
                "webPage": boolean,
                "logo": int,                # from storage/contents/info  type 'Logo'
                "tv": boolean
                                           # In 'SST' and 'WEB' the accountId and channelId 
                                           # is empty, in 'MST' the url is empty 
            }



        Description: Manage of transcodec channels
        Path: /live/inputs/transcode
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/transcode/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "description": string, 
                "input": int,        # from live/inputs
                "inputType": int,    # from live/inputs/types 
                "profile": int,      # from live/profiles/transcode
                "logo": int,         # from storage/contents/info  type 'Logo'
                "tv": boolean
            }



        Description: Manage of channel scrambling
        Path: /live/inputs/scramble
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/scramble/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "description": string, 
                "input": int,           # from live/inputs
                "inputType": int,       # from live/inputs/types 
                "decrypt": boolean,     # 'True' for unscrambling and 'False' for scrambling 
                "profile": int,         # from live/profiles/scramble
                "logo": int,            # from storage/contents/info  type 'Logo'
                "tv": boolean
            }

        Description: Manage of mix channels
        Path: /live/inputs/mix
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/inputs/mix/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "description": string, 
                "profile": int,          # from live/profiles/mix
                "input1": int,           # from live/inputs
                "inputType1": int,       # from live/inputs/types 
                "input2": int,           # from live/inputs
                "inputType2": int,       # from live/inputs/types 
                "logo": int,             # from storage/contents/info  type 'Logo'
                "tv": boolean
            }

### Live Output  #########################################
        Description: Manage of Output DVB channels
        Path: /live/output/dvb
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/output/dvb/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "description": string, 
                "input": int,       # from live/inputs
                "inputType": int,   # from live/inputs/types 
                "category": [int],  # from storage/contents/categories
                "dvbId": int, 
                "serviceId": int,   # from 100 ... 999 
            }
        Description: Manage of Output Network channels
        Path: /live/output/network
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/output/network/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
               "_id": int,
               "active": boolean,
               "description": string, 
               "input": int,    
               "inputType": int,   
               "category": [int],
               "udp": boolean,
               "http": boolean,
               "rtsp": boolean,
               "hls": boolean,
            }
        Description: Manage of Output Archive channels
        Path: /live/output/archive
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /live/output/archive/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
               "_id": int,
               "active": boolean,
               "description": string, 
               "input": int,    
               "inputType": int,   
               "category": [int],
               "timeShift": int,
               "programName": string,
               "virtual": boolean,
            }


### Launcher ############################################# 
### Components 
        Description: Types of fonst 
        Path: /launcher/components/fonts
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                        {
                            "_id": int,
                            "name": string,
                            "language" : string,  # from 'en','fa','ar' 
                        },
                 ]
            }
        Description: Types of components 
        Path: /launcher/components/types
        Method: GET
        Parameters: [from=int&to=int]
        ResponseBody: 
            {
                "total":int,
                "content":[    
                        {
                            "_id": int,
                            "name": string,
                        },
                 ]
            }
        ##########################################
        Description: Manage of components
        Path: /launcher/components/info
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /launcher/components/info/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "type": int,            # from launcher/components/types
                "name":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    }, 
                "logo": int,            # 'Logo' type from storage/contents/info
                "url":string,
                "url_params": [         # parameters of url
                    "key": value,       # value from : 'user_id', 'user_name', 'platform', 
                    ...                 #              'partner_user', 'partner_pass'
                ],
                "category":[int]   # from storage/contents/categories
            }

### Components Arrange
        Description: Manage of Launcher's Menu
        Path: /launcher/menu
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /launcher/menu/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name":{
                    "en": string,
                    "fa": string,
                    "ar": string
                    }, 
                "logo": int,            # 'Logo' type from storage/contents/info
                "components": [int]     # from launcher/components/info
            }


        Description: Manage of Launcher's Config
        Path: /launcher/setting
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /launcher/setting/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string,
                "type" : string,        # from 'Line', 'Matrix', 'Curve'
                "permission": [int],      # from system/permission
                "platform":[int],       # from storage/contents/platforms
                "menu": [int],          # from launcher/menu
                "icons":{               # 'Logo' type from storage/contents/info
                    "background": int,
                    "logo": {
                        "en": int,
                        "fa": int,
                        "ar": int,
                        }
                    }
                },
                "font":{                # from launcher/components/fonts
                        "en": int,
                        "fa": int,
                        "ar": int,
                },
                "welcome":{
                        "en": string,
                        "fa": string,
                        "ar": string,
                },
                "user":{
                        "en": string,
                        "fa": string,
                        "ar": string,
                },
                "language" : string,  # from 'en','fa','ar' 
                "welcomeClip": boolean,
                "welcomeClipMedia":{  # 'Video' type from storage/contents/info
                        "en": int,
                        "fa": int,
                        "ar": int,
                },
                "unitName": string,       # from 'Room', 'TV', 'Bed', 'Seat', 'Unit' 
                "clientHotspot": string,  # from 'AccessPoint', 'TV/STB'
                "defaultChannel": int     # from live/output/*
            }

### Users ################################################
### User Groups
        Description: Manage of Users's groups
        Path: /users/group
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/group/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "permission": [int],      # from system/permission
                "weektime": [int]          # from system/weektime  
            }

### Profile(ExpireTime&Date,)     
        Description: Manage of Users
        Path: /users/user
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/user/{id}
        Method: GET, PUT, POST, DELETE 
        RequestBody: 
            {
                "_id": int,
                "active": boolean,
                "name": string, 
                "description": string,
                "group": [int],         # from users/group
                "connections": int, 
                "ipAddress": string, 
                "macAddress": string, 
                "language" : string,  # from 'en','fa','ar' 
                "launcher": int,        # from launcher/setting
                "user": string,         # for Authentication
                "pass": string,         # for Authorization
                "ssidUser": string,
                "ssidPass": string,
                "vodId": int,           # from system/vod_account 
                "npvr": int,            # from 0 until storage/setting(NPVR/maxPerUser) 
                "start": epochtime,
                "expire": epochtime
            }

### Messaging  
        Description: Message from/to users
        Path: /users/message/to
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/message/to/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: 
            {
                "_id": int,
                "user": int,            # from users/user
                "time": epochtime,
                "subject": string, 
                "body": string,
            }

        Description: Message from User
        Path: /users/message/from
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    {   
                    "_id": int,
                    "user": int,        # from users/user
                    "time": epochtime,
                    "subject": string, 
                    "body": string,
                    }
                 ]
            }
        Path: /users/message/from/{id}
        Method: GET, DELETE

        Description: Message to All Users
        Path: /users/message/broadcast
        Method: GET
        Parameters: [from=int&to=int] and all record's fields
        ResponseBody: 
            {
                "total":int,
                "content":[    
                    ... same as 'PUT' RequestBody
                 ]
            }

        Path: /users/message/broadcast/{id}
        Method: GET, PUT, POST, DELETE
        RequestBody: 
            {
                "_id": int,
                "group": [int],         # from users/group
                "time": epochtime,
                "weektime": [int],       # from system/weektime  
                "expire": epochtime,
                "subject": string, 
                "body": string,
            }


#TODO:  secure user pass
#TODO:  ui login limitation(location, browser session)
